owner: mpobrien
repo: sample
branch: master
repokind: github
enabled: true
batchtime: 120
identifier: sample
stepback: true 

functions:
  "fetch source" :
    - command: git.get_project
      params:
        directory: src
    - command: shell.exec
      params:
        working_dir: src
        script: |
          echo "this is a 2nd command in the function!"
          ls
  "debug":
    command: shell.exec
    params:
      script: |
        echo "i am a debug function."
  "run a task that fails" :
    command: shell.exec
    params:
      working_dir: src
      script: |
        echo "this is a function with only a single command to run!"
        ./run.py results fail

  "run a task that passes" :
    command: shell.exec
    params:
      working_dir: src
      script: |
        ./run.py results pass

  "run a function with an arg":
    command: shell.exec
    params:
      working_dir: src
      script: |
        echo "I was called with ${foobar}"

  "run another task that fails": 
    command: shell.exec
    params:
      working_dir: src
      script: |
        echo "this is a function with only one single command to run!"
        ./run.py results fail
  "run a task that stores the dashboard":
    command: json.send
    params: 
      name: "dashboard"
      file: "testdata/dashboard.json"
      
  "run a task that stores passing dashboard":
    command: json.send
    params: 
      name: "dashboard"
      file: "testdata/passing.json"



pre:
  - command: shell.exec
    params:
      script: |
        rm -rf src || true
        echo "pre-task run. JUST ONE COMMAND"
        echo "hello world"

post:
  - command: shell.exec
    params:
      script: |
        echo "post-task run."
        true
  - command: attach.results
    params:
      file_location: src/results.json

tasks:
- name: compile
  depends_on: []
  commands:
    - func: "fetch source"
    - func: "run a task that passes" 
    - func: "run a function with an arg"
      vars:
        foobar: "TESTING: ONE"
    - func: "run a function with an arg"
      vars:
        foobar: "TESTING: TWO"

- name: passing_test 
  depends_on: 
  - name: compile
  commands:
    - func: "fetch source"
    - func: "run a task that passes"

- name: failing_test 
  depends_on: 
  - name: compile
  commands:
    - func: "fetch source"
    - func: "run a task that fails"

- name: another_fails
  depends_on: 
  - name: compile
  commands:
    - func: "fetch source"
    - func: "run another task that fails"

- name: timeout_test
  depends_on: 
  - name: compile
  commands:
    - func: "fetch source"
    - command: shell.exec
      timeout_secs: 20
      params:
        working_dir: src
        script: |
           echo "this is going to timeout"          
           ./run.py timeout
- name: patch
  depends_on:
    - name: compile
  commands:
    - func: "fetch source"
    - func: "run a task that passes"
- name: s3putAndGet
  depends_on:
  - name: compile
  commands:
    - command: shell.exec
      params:
        script: |
            set -o verbose
            echo "here is some log output to stdout" > test.json
    - command: archive.targz_pack
      params:
        target: "target.tgz"
        source_dir: "src"
        include:
          - "test.json"
    - command: s3.put 
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: target.tgz
        remote_file: ${push_path}/test.tgz
        bucket: ${push_source_bucket}
        permissions: public-read-write
        content_type: application/tar
        display_name: test_copy
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: ${push_path}/test.tgz
        bucket: mciuploads
        local_file: local.tgz
- name: manifest_test
  depends_on: 
  - name: compile
  commands: 
    - command: manifest.load
- name: json_test
  depends_on:
  - name: compile
  commands: 
  - func: "run a task that stores the dashboard"

- name: json_test2
  depends_on:
  - name: compile
  commands: 
  - func: "run a task that stores the dashboard"

- name: json_test3
  depends_on:
  - name: compile
  commands: 
  - func: "run a task that stores passing dashboard"

modules: 
- name: evergreen
  repo: git@github.com:evergreen-ci/evergreen.git
  branch: master

buildvariants:
  - name: osx-108
    display_name: OSX
    modules: ~
    run_on:
    - localtestdistro
    expansions:
      test_flags: "blah blah"
      push_path: s3CopyFolder
      push_name: osx108
      push_destination_bucket: mciuploads
      push_source_bucket: mciuploads
    tasks:
    - name: compile
    - name: passing_test
    - name: json_test
    - name: json_test2
    - name: json_test3
